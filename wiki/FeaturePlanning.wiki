#summary Feature planning and ideas which could become planned features
#labels Phase-Design,Featured

*This page contains details of features which have been earmarked for implementation and ideas for future features.*

Suggestions are welcome! Comment on this page or create an Issue with feature details (don't worry about the fact that Google Code won't let you mark it as an Enhancement yourself).

=Planned features=

_Features which will be implemented at some point._

==Make `order_insertion_by` a list==

[http://djangopeople.net/brosner/ Brian Rosner] brought this up on #django - it really should have been the initial implementation.

Given a list of fields (assume we're inserting a root node for this example), my initial thoughts are that you'd generate a query something like the following to find a suitable right sibling:

{{{
order_insertion_by = ['name', 'size', 'date']

WHERE
   parent IS NULL -- would be = %(parent)s for child nodes
   AND (
       (name > %(name)s
       OR (name = %(name)s AND size > %(size)s)
       OR (name = %(name)s AND size = %(size)s AND date => %(date)s) -- => allows fallback to tree_id or lft when required
   )
ORDER BY name, size, date, tree_id -- tree_id would be lft for child nodes
}}}

=Ideas=

_Ideas for features - any details, APIs and example code presented in this section are on a purely speculative, would-like-to-have basis._

==Newforms components for selecting tree nodes==

Comment by [http://code.google.com/u/ajaksu/ ajaksu] on Jan 06, 2008:

  How about simple support to use nodes as tags? So you can have independent hierarchical trees of categories that can be associated with items in a sort of "Trove classifiers" way. Would be very useful to tons of projects.

Reply:

  Would a many-to-many relationship from a given model to the tree model effectively give you that? If you were to display a multiple select and displayed the full path to each node in the select, I think you'd have pretty much what PyPi! gives you when you're maintaining your own project details.

  If there was a utility for displaying the full path to a node when working with a tree of items, this could be made quite easy - we could also provide a newforms widget which displays this kind of multiple select for you.

As a result of this request, the `tree_path` template filter and an argument to `tree_info` filter/`tree_item_iterator` function which results the unicode representation of a node's ancestors being added to the resulting tree structure `dict` were both added in revision 69.

These could be used as part of the implementation of a `newforms` `Field`/`Widget` for selecting tree nodes, with an option to display the full path to each node.

==Tree management views (with `django.contrib.admin` integration)==

Create views for managing the tree of any Model MPTT has been used with. Probably best to leave any `django.contrib.admin` integration until the [http://code.djangoproject.com/wiki/NewformsAdminBranch newforms-admin] branch lands in trunk.

How easy would it be to provide admin-specific templates and more general templates should someone wish to use this functionality in [http://www.jonathanbuchanan.plus.com/images/admin.jpg their own app]?

===Views===

  * A list of any Models MPTT has been used with, similar to the admin's current front page. Each model would have the following links:
    * *Browse* - takes you to the node browsing view, starting at root nodes. This is also where the Model name link should take you.
    * *Full Tree* - takes you directly to the tree display/editing view for the full tree - convenient to be able to go there directly for small sets of data.
  * A node browsing view which allows drilling down through the levels of the tree and selecting a node/nodes for display/editing.
  * Display/editing of the subtree for a specified node or nodes, or the full tree. Features:
    * Tree display - progressively enhanced for expansion/contraction.
    * Node movement - progressively enhanced to use XMLHttpRequest, with a live tree update if the tree the node ends up in is currently displayed.
    * Other progressive enhancements - dynamic loading of more items? This could potentially be used to browse or search for other nodes to select a target for a node move.

    Consider someone who needs to be able to move a deeply nested leaf node to a level halfway down some other tree - what would be a nice interface for making this kind of change?

===Usage===

In the case of the admin app, provide an admin URLConf to be included before the admin's own URLConf:

{{{
urlpatterns = patterns('',
    (r'admin/', include('mptt.admin.urls')),
    (r'admin/', include('django.contrib.admin.urls')),
)
}}}

===Related work===

  * At the moment, there's no record of which Models MPTT has been used with - keeping a record of these as `mptt.register` is called would make it easy to determine which, if any, Models should be displayed in these views (and prevent multiple calls for the same Model).

=Completed Features=

==Getting root nodes (revisions 70 & 71)==

[http://code.google.com/p/django-mptt/issues/detail?id=5 Issue 5] - add a method to retrieve the root node of a particular tree in the manager.

A model instance method to retrieve the root node for a given node's tree would also be handy.

==Manual insertion API (revsion 81)==

Currently, nodes are always added as last children. Provide a means (likely a new method in `TreeManager`) of specifying an insertion point for a node which hasn't been saved yet, using target/position arguments. Modifying `pre_save` not to do anything if tree fields are already set should allow us to do this no problem.

==Automatic ordering when inserting new nodes (revision 84)==

Provide a new `order_insertion_by` argument to `mptt.register`, defaulting to `None`. Modify pre_save so that if a list of field names is given for this setting, we query the database to try to find the appropriate insertion point for the new node. If none is found, it becomes a last child, otherwise it becomes a previous sibling. Also implemented this for automatice reparenting.